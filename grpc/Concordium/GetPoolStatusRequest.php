<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: concordium_p2p_rpc.proto

namespace Concordium;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request for getting the status of a pool.
 *
 * Generated from protobuf message <code>concordium.GetPoolStatusRequest</code>
 */
class GetPoolStatusRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The block from which the query should be processed.
     *
     * Generated from protobuf field <code>string block_hash = 1;</code>
     */
    private $block_hash = '';
    /**
     * Whether the request is for passive delegation or a specific baker.
     *
     * Generated from protobuf field <code>bool passive_delegation = 2;</code>
     */
    private $passive_delegation = false;
    /**
     * The baker id to get the status of. This will be ignored if 'passive_delegation' is 'true'.
     *
     * Generated from protobuf field <code>uint64 baker_id = 3 [jstype = JS_STRING];</code>
     */
    private $baker_id = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $block_hash
     *           The block from which the query should be processed.
     *     @type bool $passive_delegation
     *           Whether the request is for passive delegation or a specific baker.
     *     @type int|string $baker_id
     *           The baker id to get the status of. This will be ignored if 'passive_delegation' is 'true'.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ConcordiumP2PRpc::initOnce();
        parent::__construct($data);
    }

    /**
     * The block from which the query should be processed.
     *
     * Generated from protobuf field <code>string block_hash = 1;</code>
     * @return string
     */
    public function getBlockHash()
    {
        return $this->block_hash;
    }

    /**
     * The block from which the query should be processed.
     *
     * Generated from protobuf field <code>string block_hash = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setBlockHash($var)
    {
        GPBUtil::checkString($var, True);
        $this->block_hash = $var;

        return $this;
    }

    /**
     * Whether the request is for passive delegation or a specific baker.
     *
     * Generated from protobuf field <code>bool passive_delegation = 2;</code>
     * @return bool
     */
    public function getPassiveDelegation()
    {
        return $this->passive_delegation;
    }

    /**
     * Whether the request is for passive delegation or a specific baker.
     *
     * Generated from protobuf field <code>bool passive_delegation = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setPassiveDelegation($var)
    {
        GPBUtil::checkBool($var);
        $this->passive_delegation = $var;

        return $this;
    }

    /**
     * The baker id to get the status of. This will be ignored if 'passive_delegation' is 'true'.
     *
     * Generated from protobuf field <code>uint64 baker_id = 3 [jstype = JS_STRING];</code>
     * @return int|string
     */
    public function getBakerId()
    {
        return $this->baker_id;
    }

    /**
     * The baker id to get the status of. This will be ignored if 'passive_delegation' is 'true'.
     *
     * Generated from protobuf field <code>uint64 baker_id = 3 [jstype = JS_STRING];</code>
     * @param int|string $var
     * @return $this
     */
    public function setBakerId($var)
    {
        GPBUtil::checkUint64($var);
        $this->baker_id = $var;

        return $this;
    }

}

