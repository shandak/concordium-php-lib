<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: concordium_p2p_rpc.proto

namespace Concordium;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A response containing information about the node.
 *
 * Generated from protobuf message <code>concordium.NodeInfoResponse</code>
 */
class NodeInfoResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * The unique node identifier.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue node_id = 1;</code>
     */
    private $node_id = null;
    /**
     * The local time of the node represented as a unix timestamp in seconds.
     *
     * Generated from protobuf field <code>uint64 current_localtime = 2 [jstype = JS_STRING];</code>
     */
    private $current_localtime = 0;
    /**
     * The node type. Either "Node" or "Bootstrapper".
     *
     * Generated from protobuf field <code>string peer_type = 3;</code>
     */
    private $peer_type = '';
    /**
     * Whether the node is a baker.
     *
     * Generated from protobuf field <code>bool consensus_baker_running = 4;</code>
     */
    private $consensus_baker_running = false;
    /**
     * Whether consensus is running.
     * This is only false if the protocol was updated to a version which the node software does not support.
     *
     * Generated from protobuf field <code>bool consensus_running = 5;</code>
     */
    private $consensus_running = false;
    /**
     * Whether the node is "Active" or "Passive".
     * - "Active": the node has baker credentials and can thus potentially participate in baking and finalization.
     * - "Passive": the node has no baker credentials is thus only an observer of the consensus protocol.
     *
     * Generated from protobuf field <code>string consensus_type = 6;</code>
     */
    private $consensus_type = '';
    /**
     * The baking status of the node.
     *
     * Generated from protobuf field <code>.concordium.NodeInfoResponse.IsInBakingCommittee consensus_baker_committee = 7;</code>
     */
    private $consensus_baker_committee = 0;
    /**
     * Whether the node is part of the finalization committee.
     *
     * Generated from protobuf field <code>bool consensus_finalizer_committee = 8;</code>
     */
    private $consensus_finalizer_committee = false;
    /**
     * The baker id. This will be `null` if the node is not a baker.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value consensus_baker_id = 9;</code>
     */
    private $consensus_baker_id = null;
    /**
     * Deprecated.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue staging_net_username = 50 [deprecated = true];</code>
     */
    private $staging_net_username = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\StringValue $node_id
     *           The unique node identifier.
     *     @type int|string $current_localtime
     *           The local time of the node represented as a unix timestamp in seconds.
     *     @type string $peer_type
     *           The node type. Either "Node" or "Bootstrapper".
     *     @type bool $consensus_baker_running
     *           Whether the node is a baker.
     *     @type bool $consensus_running
     *           Whether consensus is running.
     *           This is only false if the protocol was updated to a version which the node software does not support.
     *     @type string $consensus_type
     *           Whether the node is "Active" or "Passive".
     *           - "Active": the node has baker credentials and can thus potentially participate in baking and finalization.
     *           - "Passive": the node has no baker credentials is thus only an observer of the consensus protocol.
     *     @type int $consensus_baker_committee
     *           The baking status of the node.
     *     @type bool $consensus_finalizer_committee
     *           Whether the node is part of the finalization committee.
     *     @type \Google\Protobuf\UInt64Value $consensus_baker_id
     *           The baker id. This will be `null` if the node is not a baker.
     *     @type \Google\Protobuf\StringValue $staging_net_username
     *           Deprecated.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ConcordiumP2PRpc::initOnce();
        parent::__construct($data);
    }

    /**
     * The unique node identifier.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue node_id = 1;</code>
     * @return \Google\Protobuf\StringValue
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     * The unique node identifier.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue node_id = 1;</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setNodeId($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->node_id = $var;

        return $this;
    }

    /**
     * The local time of the node represented as a unix timestamp in seconds.
     *
     * Generated from protobuf field <code>uint64 current_localtime = 2 [jstype = JS_STRING];</code>
     * @return int|string
     */
    public function getCurrentLocaltime()
    {
        return $this->current_localtime;
    }

    /**
     * The local time of the node represented as a unix timestamp in seconds.
     *
     * Generated from protobuf field <code>uint64 current_localtime = 2 [jstype = JS_STRING];</code>
     * @param int|string $var
     * @return $this
     */
    public function setCurrentLocaltime($var)
    {
        GPBUtil::checkUint64($var);
        $this->current_localtime = $var;

        return $this;
    }

    /**
     * The node type. Either "Node" or "Bootstrapper".
     *
     * Generated from protobuf field <code>string peer_type = 3;</code>
     * @return string
     */
    public function getPeerType()
    {
        return $this->peer_type;
    }

    /**
     * The node type. Either "Node" or "Bootstrapper".
     *
     * Generated from protobuf field <code>string peer_type = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setPeerType($var)
    {
        GPBUtil::checkString($var, True);
        $this->peer_type = $var;

        return $this;
    }

    /**
     * Whether the node is a baker.
     *
     * Generated from protobuf field <code>bool consensus_baker_running = 4;</code>
     * @return bool
     */
    public function getConsensusBakerRunning()
    {
        return $this->consensus_baker_running;
    }

    /**
     * Whether the node is a baker.
     *
     * Generated from protobuf field <code>bool consensus_baker_running = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setConsensusBakerRunning($var)
    {
        GPBUtil::checkBool($var);
        $this->consensus_baker_running = $var;

        return $this;
    }

    /**
     * Whether consensus is running.
     * This is only false if the protocol was updated to a version which the node software does not support.
     *
     * Generated from protobuf field <code>bool consensus_running = 5;</code>
     * @return bool
     */
    public function getConsensusRunning()
    {
        return $this->consensus_running;
    }

    /**
     * Whether consensus is running.
     * This is only false if the protocol was updated to a version which the node software does not support.
     *
     * Generated from protobuf field <code>bool consensus_running = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setConsensusRunning($var)
    {
        GPBUtil::checkBool($var);
        $this->consensus_running = $var;

        return $this;
    }

    /**
     * Whether the node is "Active" or "Passive".
     * - "Active": the node has baker credentials and can thus potentially participate in baking and finalization.
     * - "Passive": the node has no baker credentials is thus only an observer of the consensus protocol.
     *
     * Generated from protobuf field <code>string consensus_type = 6;</code>
     * @return string
     */
    public function getConsensusType()
    {
        return $this->consensus_type;
    }

    /**
     * Whether the node is "Active" or "Passive".
     * - "Active": the node has baker credentials and can thus potentially participate in baking and finalization.
     * - "Passive": the node has no baker credentials is thus only an observer of the consensus protocol.
     *
     * Generated from protobuf field <code>string consensus_type = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setConsensusType($var)
    {
        GPBUtil::checkString($var, True);
        $this->consensus_type = $var;

        return $this;
    }

    /**
     * The baking status of the node.
     *
     * Generated from protobuf field <code>.concordium.NodeInfoResponse.IsInBakingCommittee consensus_baker_committee = 7;</code>
     * @return int
     */
    public function getConsensusBakerCommittee()
    {
        return $this->consensus_baker_committee;
    }

    /**
     * The baking status of the node.
     *
     * Generated from protobuf field <code>.concordium.NodeInfoResponse.IsInBakingCommittee consensus_baker_committee = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setConsensusBakerCommittee($var)
    {
        GPBUtil::checkEnum($var, \Concordium\NodeInfoResponse_IsInBakingCommittee::class);
        $this->consensus_baker_committee = $var;

        return $this;
    }

    /**
     * Whether the node is part of the finalization committee.
     *
     * Generated from protobuf field <code>bool consensus_finalizer_committee = 8;</code>
     * @return bool
     */
    public function getConsensusFinalizerCommittee()
    {
        return $this->consensus_finalizer_committee;
    }

    /**
     * Whether the node is part of the finalization committee.
     *
     * Generated from protobuf field <code>bool consensus_finalizer_committee = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setConsensusFinalizerCommittee($var)
    {
        GPBUtil::checkBool($var);
        $this->consensus_finalizer_committee = $var;

        return $this;
    }

    /**
     * The baker id. This will be `null` if the node is not a baker.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value consensus_baker_id = 9;</code>
     * @return \Google\Protobuf\UInt64Value
     */
    public function getConsensusBakerId()
    {
        return $this->consensus_baker_id;
    }

    /**
     * The baker id. This will be `null` if the node is not a baker.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value consensus_baker_id = 9;</code>
     * @param \Google\Protobuf\UInt64Value $var
     * @return $this
     */
    public function setConsensusBakerId($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\UInt64Value::class);
        $this->consensus_baker_id = $var;

        return $this;
    }

    /**
     * Deprecated.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue staging_net_username = 50 [deprecated = true];</code>
     * @return \Google\Protobuf\StringValue
     */
    public function getStagingNetUsername()
    {
        return $this->staging_net_username;
    }

    /**
     * Deprecated.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue staging_net_username = 50 [deprecated = true];</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setStagingNetUsername($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->staging_net_username = $var;

        return $this;
    }

}

